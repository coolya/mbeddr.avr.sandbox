package avr.generator.template.main;

/*Generated by MPS */

import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.generator.template.PropertyMacroContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.Sequence;
import com.mbeddr.core.buildconfig.behavior.Binary_Behavior;
import com.mbeddr.core.buildconfig.behavior.LibraryRef_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import com.mbeddr.core.buildconfig.behavior.Linkable_Behavior;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import java.io.File;
import jetbrains.mps.generator.template.IfMacroContext;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodeContext;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodesContext;
import com.mbeddr.core.buildconfig.behavior.BuildConfiguration_Behavior;
import jetbrains.mps.generator.template.TemplateQueryContext;
import com.mbeddr.core.buildconfig.behavior.BCHelper;

public class QueriesGenerated {
  public static Object propertyMacro_GetPropertyValue_2671893947946260417(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "$(OBJ_" + SPropertyOperations.getString(_context.getNode(), "name") + ")";
  }

  public static Object propertyMacro_GetPropertyValue_2671893947946260475(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "lib" + SPropertyOperations.getString(_context.getNode(), "name") + ".a";
  }

  public static Object propertyMacro_GetPropertyValue_2671893947946260431(final IOperationContext operationContext, final PropertyMacroContext _context) {
    String result = "";
    for (SNode od : Sequence.fromIterable(Binary_Behavior.call_referencedObjDescriptors_5275554368891447099(_context.getNode()))) {
      result += SPropertyOperations.getString(od, "path") + " ";
    }
    return result;
  }

  public static Object propertyMacro_GetPropertyValue_2671893947946260455(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "name");
  }

  public static Object propertyMacro_GetPropertyValue_5046689135693953173(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "$(OBJ_" + SPropertyOperations.getString(_context.getNode(), "name") + ")";
  }

  public static Object propertyMacro_GetPropertyValue_5275554368891504931(final IOperationContext operationContext, final PropertyMacroContext _context) {
    String result = "";
    for (SNode od : Sequence.fromIterable(Binary_Behavior.call_referencedObjDescriptors_5275554368891447099(_context.getNode()))) {
      result += SPropertyOperations.getString(od, "path") + " ";
    }
    return result;
  }

  public static Object propertyMacro_GetPropertyValue_2671893947946336387(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "-L" + LibraryRef_Behavior.call_pathToLib_1553713790141389241(_context.getNode()) + " -l" + SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), "lib", false), "name");
  }

  public static Object propertyMacro_GetPropertyValue_4809476668198808423(final IOperationContext operationContext, final PropertyMacroContext _context) {
    String result = "";
    if (isNotEmpty_x583g4_a0b0h(SPropertyOperations.getString(_context.getNode(), "path"))) {
      result += "-L" + Linkable_Behavior.call_pathToLinkable_4809476668198808256(_context.getNode()) + " ";
    }
    result += "-l" + SPropertyOperations.getString(_context.getNode(), "name");
    return result;
  }

  public static Object propertyMacro_GetPropertyValue_7717755763392622502(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "name");
  }

  public static Object propertyMacro_GetPropertyValue_7717755763392611769(final IOperationContext operationContext, final PropertyMacroContext _context) {
    String result = "";
    for (SNode m : Sequence.fromIterable(Binary_Behavior.call_referencedImplModules_9066372830133149007(_context.getNode()))) {
      if (!(result.equals(""))) {
        result += " ";
      }
      result += SPropertyOperations.getString(m, "name") + ".o";
    }
    return result;
  }

  public static Object propertyMacro_GetPropertyValue_5046689135693953032(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "_OBJ_" + SPropertyOperations.getString(_context.getNode(), "name");
  }

  public static Object propertyMacro_GetPropertyValue_5046689135693953100(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "OBJ_" + SPropertyOperations.getString(_context.getNode(), "name");
  }

  public static Object propertyMacro_GetPropertyValue_5046689135693953134(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "$(patsubst %,$(ODIR)/%,$(_OBJ_" + SPropertyOperations.getString(_context.getNode(), "name") + "))";
  }

  public static Object propertyMacro_GetPropertyValue_7717755763392632973(final IOperationContext operationContext, final PropertyMacroContext _context) {
    String result = "";
    for (SNode e : ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "binaries", true))) {
      result += SPropertyOperations.getString(e, "name") + ".hex ";
    }
    return result;
  }

  public static Object propertyMacro_GetPropertyValue_5048824311958653434(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "rm -f " + SPropertyOperations.getString(_context.getNode(), "name") + ".*";
  }

  public static Object propertyMacro_GetPropertyValue_5048824311957549382(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Iterable<SNode> referencedLibs = ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "binaries", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "com.mbeddr.core.buildconfig.structure.Executable");
      }
    }).translate(new ITranslator2<SNode, SNode>() {
      public Iterable<SNode> translate(SNode it) {
        return SLinkOperations.getTargets(it, "referencedLibs", true);
      }
    });
    if (Sequence.fromIterable(referencedLibs).isEmpty()) {
      return "";
    }
    String res = "-I";
    int i = 0;
    for (SNode libref : Sequence.fromIterable(referencedLibs)) {
      res += LibraryRef_Behavior.call_pathToLib_1553713790141389241(libref);
      if (i > 0) {
        res += File.pathSeparator;
      }
      i++;
    }
    return res;
  }

  public static Object propertyMacro_GetPropertyValue_2736179788492007075(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "CFLAGS +=" + SPropertyOperations.getString(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "target", true), "com.mbeddr.core.buildconfig.structure.IDebuggablePlatform"), "debugOptions");
  }

  public static Object propertyMacro_GetPropertyValue_2736179788492009161(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "name");
  }

  public static Object propertyMacro_GetPropertyValue_5048824311957643378(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "name");
  }

  public static Object propertyMacro_GetPropertyValue_745648737914668851(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "./" + Binary_Behavior.call_executableFileName_745648737914693790(_context.getNode()) + "\n\t";
  }

  public static Object propertyMacro_GetPropertyValue_6274253368419469211(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "name") + ".hex ";
  }

  public static Object propertyMacro_GetPropertyValue_6274253368419470577(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "name");
  }

  public static boolean ifMacro_Condition_2736179788492009093(final IOperationContext operationContext, final IfMacroContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "target", true), "com.mbeddr.core.buildconfig.structure.IDebuggablePlatform") && isNotEmpty_x583g4_a0a0a22(SPropertyOperations.getString(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "target", true), "com.mbeddr.core.buildconfig.structure.IDebuggablePlatform"), "debugOptions"));
  }

  public static boolean ifMacro_Condition_2736179788492009174(final IOperationContext operationContext, final IfMacroContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "target", true), "com.mbeddr.core.buildconfig.structure.IDebuggablePlatform") && isNotEmpty_x583g4_a0a0a32(SPropertyOperations.getString(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "target", true), "com.mbeddr.core.buildconfig.structure.IDebuggablePlatform"), "debugOptions"));
  }

  public static boolean ifMacro_Condition_2671893947946266619(final IOperationContext operationContext, final IfMacroContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "binaries", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "com.mbeddr.core.buildconfig.structure.Executable");
      }
    }).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SPropertyOperations.getBoolean(it, "isTest");
      }
    });
  }

  public static SNode sourceNodeQuery_5513927302055854390(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "pin", false);
  }

  public static Iterable sourceNodesQuery_2671893947946336372(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "referencedLibs", true);
  }

  public static Iterable sourceNodesQuery_4809476668198808416(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "linkables", true);
  }

  public static Iterable sourceNodesQuery_5046689135693953022(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "binaries", true);
  }

  public static Iterable sourceNodesQuery_5046689135693953086(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "binaries", true);
  }

  public static Iterable sourceNodesQuery_5048824311958653422(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return BuildConfiguration_Behavior.call_getModulesReferencedViaLibs_5048824311958653276(_context.getNode());
  }

  public static Iterable sourceNodesQuery_2736179788492009141(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "binaries", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "com.mbeddr.core.buildconfig.structure.Executable");
      }
    });
  }

  public static Iterable sourceNodesQuery_2671893947946228251(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "binaries", true);
  }

  public static Iterable sourceNodesQuery_5048824311957643358(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "binaries", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "com.mbeddr.core.buildconfig.structure.Executable");
      }
    }).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SPropertyOperations.getBoolean(it, "isTest");
      }
    });
  }

  public static Iterable sourceNodesQuery_745648737914668803(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "binaries", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "com.mbeddr.core.buildconfig.structure.Executable");
      }
    }).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SPropertyOperations.getBoolean(it, "isTest");
      }
    });
  }

  public static Iterable sourceNodesQuery_6274253368419469204(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "binaries", true);
  }

  public static boolean mappingConfiguration_Condition_440773076688628146(final IOperationContext operationContext, final TemplateQueryContext _context) {
    SNode bc = BCHelper.findBC(_context.getInputModel(), _context, "avr/main.arduino_uno");
    if (SLinkOperations.getTarget(bc, "target", true) == null) {
      return false;
    }
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(bc, "target", true), "avr.structure.Arduino");
  }

  public static boolean isNotEmpty_x583g4_a0b0h(String str) {
    return str != null && str.length() > 0;
  }

  public static boolean isNotEmpty_x583g4_a0a0a22(String str) {
    return str != null && str.length() > 0;
  }

  public static boolean isNotEmpty_x583g4_a0a0a32(String str) {
    return str != null && str.length() > 0;
  }
}
