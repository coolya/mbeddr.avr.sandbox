package avr.actions;

/*Generated by MPS */

import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.action.SideTransformPreconditionContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.List;
import jetbrains.mps.smodel.action.INodeSubstituteAction;
import jetbrains.mps.smodel.action.SideTransformActionsBuilderContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.util.Computable;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.action.ModelActions;
import jetbrains.mps.nodeEditor.CellSide;

public class QueriesGenerated {
  public static boolean sideTransformHintSubstituteActionsBuilder_Precondition_DigitalInput_5513927302055828163(final IOperationContext operationContext, final SideTransformPreconditionContext _context) {
    return SPropertyOperations.getString(_context.getSourceNode(), "name") == null;
  }

  public static List<INodeSubstituteAction> sideTransform_ActionsFactory_DigitalInput_5513927302055828162(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      Computable computable = new Computable() {
        public Object compute() {
          SPropertyOperations.set(_context.getSourceNode(), "name", "");
          return _context.getSourceNode();
        }
      };
      SNode node = (SNode) computable.compute();
      ListSequence.fromList(result).addSequence(ListSequence.fromList(ModelActions.createRightTransformHintSubstituteActions(node, CellSide.RIGHT, _context.getTransformationTag(), operationContext)));
    }
    return result;
  }
}
